#pragma kernel CSMain
 


 
float _Time;
float _Delta;
float3 _HandL;
float3 _HandR;
float  _Drawing;
float  _BaseSize;
float  _TipSize;
float  _PointSize;

float3 _Interface;

int _RibbonWidth;
int _RibbonLength;
int _PointsLength;

float radius = .4;
uint _ThreadSize;
uint _StrideSize;

#define threadX 4
#define threadY 4
#define threadZ 4

#define strideX 4
#define strideY 4
#define strideZ 4

#define gridX (threadX * strideX)
#define gridY (threadY * strideY)
#define gridZ (threadZ * strideZ)






struct Vert {

    float3 pos;
    float3 vel;
    float3 nor;
    float2 uv;
    float  ribbonID;
    float  life; 
    float3 debug;

};

struct Pos {

    float3 pos;

};

RWStructuredBuffer<Vert> vertBuffer;
RWStructuredBuffer<Pos> ogBuffer;
RWStructuredBuffer<float4x4> pointsBuffer;
//RWStructuredBuffer<float4x4> pointsBuffer;

float3 getPoint( float4x4 mat ){
  return float3(mat[0][3] , mat[1][3] , mat[2][3]);//mul(mat , float4( 0. , 0. , 0. , 0. )).xyz;
}


float3 cubicCurve( float t , float3  c0 , float3 c1 , float3 c2 , float3 c3 ){
  
  float s  = 1. - t; 

  float3 v1 = c0 * ( s * s * s );
  float3 v2 = 3. * c1 * ( s * s ) * t;
  float3 v3 = 3. * c2 * s * ( t * t );
  float3 v4 = c3 * ( t * t * t );

  float3 value = v1 + v2 + v3 + v4;

  return value;

}



float3 cubicFromValue( in float val , out float3 upPos , out float3 doPos ){

  //float3 upPos;
  //float3 doPos;


  float3 p0 = float3( 0. , 0. , 0. );
  float3 v0 = float3( 0. , 0. , 0. );
  float3 p1 = float3( 0. , 0. , 0. );
  float3 v1 = float3( 0. , 0. , 0. );

  float3 p2 = float3( 0. , 0. , 0. );



  float base = val * (float(_PointsLength)-1.);
  float baseUp   = floor( base );
  float baseDown = ceil( base );
  float amount = base - baseUp;

  if( baseUp == 0. ){

      p0 = getPoint( pointsBuffer[ int( baseUp )        ] );
      p1 = getPoint( pointsBuffer[ int( baseDown )      ] );
      p2 = getPoint( pointsBuffer[ int( baseDown + 1. ) ] );


      v1 = .5 * ( p2 - p0 );

  }else if( baseDown == float(_PointsLength-1) ){

      p0 = getPoint( pointsBuffer[ int( baseUp )      ] );
      p1 = getPoint( pointsBuffer[ int( baseDown )    ] );
      p2 = getPoint( pointsBuffer[ int( baseUp - 1. ) ] );

      v0 = .5 * ( p1 - p2 );

  }else{

      p0 = getPoint( pointsBuffer[ int( baseUp )   ] );
      p1 = getPoint( pointsBuffer[ int( baseDown ) ] );


      float3 pMinus;

      pMinus = getPoint( pointsBuffer[ int( baseUp - 1. )   ] );
      p2 =     getPoint( pointsBuffer[ int( baseDown + 1. ) ] );

      v1 = .5 * ( p2 - p0 );
      v0 = .5 * ( p1 - pMinus );

  }


  float3 c0 = p0;
  float3 c1 = p0 + v0/3.;
  float3 c2 = p1 - v1/3.;
  float3 c3 = p1;




  float3 pos = cubicCurve( amount , c0 , c1 , c2 , c3 );

  upPos = cubicCurve( amount  + .01 , c0 , c1 , c2 , c3 );
  doPos = cubicCurve( amount  - .01 , c0 , c1 , c2 , c3 );

  return pos;


}


float3 springForce( float3 p1 , float3 p2 , float d ){

  float3 dir = p1 - p2;
  float l = length( dir );
  dir = normalize( dir );

  float dif = l - d;

  return dif * dif * float(sign(dif)) * -dir;

}


float sdBox( float3 p)
{
  float3 b = float3( 1. , 1. , 1. );
  float3 d = abs(p) - b;
  return min(max(d.x,max(d.y,d.z)),0.0) +
         length(max(d,0.0));
}




[numthreads(threadX,threadY,threadZ)]
void CSMain (uint3 id : SV_DispatchThreadID) {
  
  int total = gridX * gridY * gridZ;
  
  int pID = id.x + id.y * gridX + id.z * gridX * gridY;
  float rowID = floor( float(pID) / float(_RibbonWidth) );
  float colID = float(pID) % float(_RibbonWidth);
  float rowN = rowID / float( _RibbonLength );
  float colN = colID / float(_RibbonWidth);

  //rowN *= .8;

  float pointID = rowN * float(_PointsLength);
  float pointDown = floor( pointID );
  float pointUp   = ceil( pointID );
  float val       = pointID - pointDown;


  float3 fPos = float3( 0. , 0. , 0.);
  float3 pos;
  float3 curveX;
  float3 curveY;

  // We know it is exactly at a point, so skip it all
  if( val == 0 ){

    float4x4 mat = pointsBuffer[ int(pointID) ];

    curveX = mul( mat , float4( 1 , 0 , 0 , 0)).xyz;
    curveY = mul( mat , float4( 0 , 0 , 1 , 0)).xyz;
    pos = getPoint( mat );

  }else{

    float3 upPos , doPos;

    pos = cubicFromValue( rowN ,  upPos , doPos );
    

    float3 d1 = normalize( pos - upPos );
    float3 d2 = normalize( doPos - pos );

    float3 curveDir =( d1 + d2 )/ 2.;
    curveX = normalize( cross( d1 , d2 ) );
    curveY = normalize( cross( curveDir, curveX ) );

    float dirAngle = acos(dot(d1,d2) / (length(d1)* length(d2)));

  //  if(  left > 0.  ){ curveY *= -1.;  curveX *= -1.; }

  }

  float angle = colN * 2. * 3.14159;
  float radius = _PointSize * 0.5;//(abs(sin( uTime * 1.5  + aUV.x * 20.)) + 1.) *.3 * fall + .3 * pow( fall , .3);

  if( rowN < .2 ){
    radius = lerp( _BaseSize , radius , pow( (rowN / .2) , .4 ) );
  }

  if( rowN > .8 ){
    radius = lerp(  radius , _TipSize , pow( ((rowN - .8) / .2) , 2.0 ) );
  }

  fPos = pos + radius * curveX * sin( angle ) + radius * curveY * cos( angle );


  
  Vert vert = vertBuffer[pID];
  Pos og = ogBuffer[pID];
  vert.debug.x = pointDown / float(_PointsLength);
  // vert.pos = fPos;
  float3 force = float3( 0. , 0. , 0. );

  force += 40.1 * springForce( vert.pos , fPos , .00000001 );

  float3 handR = _HandR - vert.pos;
  float lR = length( handR );
  handR = normalize( handR );
  if( lR < .1){
    force -=.05 *  handR * (.03) / lR; 
  }

  float3 handL = _HandL - vert.pos;
  float lL = length( handL );
  handL = normalize( handL );
  if( lL < .1){
    force -= .05 * handL * (.03) / lL; 
  }


  vert.vel += force * .03;
  if( length( vert.vel) > .005 ){ vert.vel = normalize( vert.vel ) * .005;}
  vert.pos += vert.vel;

  vert.vel *= .9;

  vertBuffer[pID] = vert;

}